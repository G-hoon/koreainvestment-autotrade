name: Deploy to Google Cloud Run

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: koreainvestment-autotrade
  REGION: asia-northeast3

jobs:
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    
    # main 브랜치에 push될 때만 배포 실행
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker to use gcloud as a credential helper
      run: |
        gcloud auth configure-docker
        
    - name: Verify authentication
      run: |
        gcloud auth list
        gcloud config list project
        
    - name: Test environment variables
      env:
        APP_KEY: ${{ secrets.APP_KEY }}
        APP_SECRET: ${{ secrets.APP_SECRET }}
        CANO: ${{ secrets.CANO }}
        ACNT_PRDT_CD: ${{ secrets.ACNT_PRDT_CD }}
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        URL_BASE: "https://openapi.koreainvestment.com:9443"
      run: |
        # 현재 디렉토리와 파일 확인
        echo "📁 현재 디렉토리: $(pwd)"
        echo "📄 파일 목록:"
        ls -la
        
        # 환경변수 간단 검증 실행
        echo "🔍 환경변수 간단 검증"
        echo "====================================="
        
        # 필수 환경변수 체크
        ENV_OK=true
        
        if [ -n "$APP_KEY" ]; then
          echo "✅ APP_KEY: 설정됨 (길이: ${#APP_KEY}자)"
        else
          echo "❌ APP_KEY: 설정되지 않음"
          ENV_OK=false
        fi
        
        if [ -n "$APP_SECRET" ]; then
          echo "✅ APP_SECRET: 설정됨 (길이: ${#APP_SECRET}자)"
        else
          echo "❌ APP_SECRET: 설정되지 않음"
          ENV_OK=false
        fi
        
        if [ -n "$CANO" ]; then
          echo "✅ CANO: 설정됨 (길이: ${#CANO}자)"
        else
          echo "❌ CANO: 설정되지 않음"
          ENV_OK=false
        fi
        
        if [ -n "$ACNT_PRDT_CD" ]; then
          echo "✅ ACNT_PRDT_CD: 설정됨 (길이: ${#ACNT_PRDT_CD}자)"
        else
          echo "❌ ACNT_PRDT_CD: 설정되지 않음"
          ENV_OK=false
        fi
        
        if [ -n "$URL_BASE" ]; then
          echo "✅ URL_BASE: 설정됨 (길이: ${#URL_BASE}자)"
        else
          echo "❌ URL_BASE: 설정되지 않음"
          ENV_OK=false
        fi
        
        # 선택적 환경변수
        if [ -n "$DISCORD_WEBHOOK_URL" ]; then
          echo "✅ DISCORD_WEBHOOK_URL: 설정됨 (길이: ${#DISCORD_WEBHOOK_URL}자)"
        else
          echo "⚠️  DISCORD_WEBHOOK_URL: 설정되지 않음 (선택사항)"
        fi
        
        if [ "$ENV_OK" = true ]; then
          echo "🎉 필수 환경변수 모두 설정됨!"
        else
          echo "❌ 필수 환경변수 누락"
          exit 1
        fi
        
    - name: Debug environment variables
      run: |
        echo "🔍 환경변수 디버깅..."
        echo "PROJECT_ID: $PROJECT_ID"
        echo "SERVICE_NAME: $SERVICE_NAME"
        echo "REGION: $REGION"
        
        # 민감하지 않은 정보만 표시
        echo "🔑 설정된 환경변수 확인:"
        echo "APP_KEY 설정됨: $([ -n '${{ secrets.APP_KEY }}' ] && echo 'YES' || echo 'NO')"
        echo "APP_SECRET 설정됨: $([ -n '${{ secrets.APP_SECRET }}' ] && echo 'YES' || echo 'NO')"
        echo "CANO 설정됨: $([ -n '${{ secrets.CANO }}' ] && echo 'YES' || echo 'NO')"
        echo "ACNT_PRDT_CD 설정됨: $([ -n '${{ secrets.ACNT_PRDT_CD }}' ] && echo 'YES' || echo 'NO')"
        echo "DISCORD_WEBHOOK_URL 설정됨: $([ -n '${{ secrets.DISCORD_WEBHOOK_URL }}' ] && echo 'YES' || echo 'NO')"
        echo "GCP_PROJECT_ID 설정됨: $([ -n '${{ secrets.GCP_PROJECT_ID }}' ] && echo 'YES' || echo 'NO')"
        echo "GCP_SA_KEY 설정됨: $([ -n '${{ secrets.GCP_SA_KEY }}' ] && echo 'YES' || echo 'NO')"
        
        # 환경변수 길이 확인 (값은 숨김)
        echo "📏 환경변수 길이 확인:"
        echo "APP_KEY 길이: $(echo '${{ secrets.APP_KEY }}' | wc -c)"
        echo "APP_SECRET 길이: $(echo '${{ secrets.APP_SECRET }}' | wc -c)"
        echo "CANO 길이: $(echo '${{ secrets.CANO }}' | wc -c)"
        echo "ACNT_PRDT_CD 길이: $(echo '${{ secrets.ACNT_PRDT_CD }}' | wc -c)"
        echo "DISCORD_WEBHOOK_URL 길이: $(echo '${{ secrets.DISCORD_WEBHOOK_URL }}' | wc -c)"
        echo "GCP_SA_KEY 길이: $(echo '${{ secrets.GCP_SA_KEY }}' | wc -c)"
        
        # 환경변수 길이 검증
        echo "🔍 환경변수 길이 검증:"
        APP_KEY_LEN=$(echo '${{ secrets.APP_KEY }}' | wc -c)
        APP_SECRET_LEN=$(echo '${{ secrets.APP_SECRET }}' | wc -c)
        CANO_LEN=$(echo '${{ secrets.CANO }}' | wc -c)
        ACNT_PRDT_CD_LEN=$(echo '${{ secrets.ACNT_PRDT_CD }}' | wc -c)
        
        # APP_KEY 검증 (20-50자)
        if [ $APP_KEY_LEN -ge 20 ] && [ $APP_KEY_LEN -le 50 ]; then
          echo "✅ APP_KEY: 길이 정상 (${APP_KEY_LEN}자)"
        else
          echo "❌ APP_KEY: 길이 비정상 (${APP_KEY_LEN}자, 예상: 20-50자)"
        fi
        
        # APP_SECRET 검증 (30-100자)
        if [ $APP_SECRET_LEN -ge 30 ] && [ $APP_SECRET_LEN -le 100 ]; then
          echo "✅ APP_SECRET: 길이 정상 (${APP_SECRET_LEN}자)"
        else
          echo "❌ APP_SECRET: 길이 비정상 (${APP_SECRET_LEN}자, 예상: 30-100자)"
        fi
        
        # CANO 검증 (8-15자)
        if [ $CANO_LEN -ge 8 ] && [ $CANO_LEN -le 15 ]; then
          echo "✅ CANO: 길이 정상 (${CANO_LEN}자)"
        else
          echo "❌ CANO: 길이 비정상 (${CANO_LEN}자, 예상: 8-15자)"
        fi
        
        # ACNT_PRDT_CD 검증 (2-5자)
        if [ $ACNT_PRDT_CD_LEN -ge 2 ] && [ $ACNT_PRDT_CD_LEN -le 5 ]; then
          echo "✅ ACNT_PRDT_CD: 길이 정상 (${ACNT_PRDT_CD_LEN}자)"
        else
          echo "❌ ACNT_PRDT_CD: 길이 비정상 (${ACNT_PRDT_CD_LEN}자, 예상: 2-5자)"
        fi

    - name: Enable required APIs
      run: |
        gcloud services enable cloudbuild.googleapis.com
        gcloud services enable run.googleapis.com
        gcloud services enable containerregistry.googleapis.com

    - name: Build and push Docker image
      run: |
        # Docker 이미지 빌드 및 푸시
        gcloud builds submit \
          --config cloudbuild.yaml \
          --substitutions _PROJECT_ID=$PROJECT_ID \
          --timeout=20m
          
        echo "✅ Docker 이미지 빌드 및 푸시 완료"
        echo "📦 이미지: gcr.io/$PROJECT_ID/koreainvestment-autotrade"

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy $SERVICE_NAME \
          --image gcr.io/$PROJECT_ID/$SERVICE_NAME \
          --region $REGION \
          --platform managed \
          --allow-unauthenticated \
          --memory 512Mi \
          --cpu 1 \
          --timeout 3600 \
          --concurrency 1 \
          --min-instances 0 \
          --max-instances 1 \
          --set-env-vars "TZ=Asia/Seoul" \
          --set-env-vars "APP_KEY=${{ secrets.APP_KEY }}" \
          --set-env-vars "APP_SECRET=${{ secrets.APP_SECRET }}" \
          --set-env-vars "CANO=${{ secrets.CANO }}" \
          --set-env-vars "ACNT_PRDT_CD=${{ secrets.ACNT_PRDT_CD }}" \
          --set-env-vars "DISCORD_WEBHOOK_URL=${{ secrets.DISCORD_WEBHOOK_URL }}" \
          --set-env-vars "URL_BASE=https://openapi.koreainvestment.com:9443" \
          --port 8080

    - name: Get service URL
      run: |
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format="value(status.url)")
        echo "🚀 배포 완료!"
        echo "📊 서비스 URL: $SERVICE_URL"
        echo "🔍 헬스체크: $SERVICE_URL/health"

  test:
    name: Run tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run syntax check
      run: |
        python -m py_compile UsaStockAutoTrade.py
        python -m py_compile start.py
        echo "✅ 문법 검사 통과"